<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux File System (Abstract)</title>
    <link href="/2024/11/11/Linux-File-System/"/>
    <url>/2024/11/11/Linux-File-System/</url>
    
    <content type="html"><![CDATA[<p>这个系列的讲座主要是学习陈硕大佬的<a href="https://space.bilibili.com/1356949475/channel/collectiondetail?sid=1211802">Linux文件系统系列视频</a>，补充自己在文件系统部分知识的欠缺。</p><p>Kenneth Lane Thompson 在文件系统的基础上用了三周分别实现了一个editor、assembler和shell实现了操作系统Unix。可见现代Linux系统中一切皆文件的哲学其实来源于此，并不是说先有操作系统，再为其设计文件系统，而是恰恰相反现有文件系统，在此基础上搭建操作系统，可见文件系统的重要性。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241111163350.png"></p><p>文件的内容由用户决定，而不是为文件预定义类型。<br>10个最核心的系统调用：</p><ul><li>open&#x2F;close&#x2F;(create)： 打开，关闭文件。</li><li>read&#x2F;write&#x2F;lseek：支持读、写、随机读写。</li><li>fstat&#x2F;ftruncate：返回文件元数据、截断文件</li><li>unlink&#x2F;mkdir&#x2F;dup…：减少引用计数、创建目录、复制文件操作符<br>这些系统调用和文件定义抽象了文件这个概念。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241111163650.png"></li></ul><p>接下来就是文件系统，其实抽象出来就是文件名到文件内容的映射。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241111164242.png"></p><p>Unix文件系统对文件系统有更具体的抽象，其中最核心的概念就是inode。inode是文件名和文件内容的一个桥梁。<br>重要变量：</p><ul><li><code>typedef uint32_t inode_num_t</code>实际上规定了文件系统最多可以有多少个文件，相当于一个主键。</li><li><code>Map&lt;string, inode_num_t&gt; dirs</code> 从文件路径到inode的映射</li><li><code>Map&lt;inode_num_t, string&gt; files</code> inode到文件内容的映射<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241111203614.png"></li></ul><p>块设备, 现在的机械硬盘大部分以4KiB为一个块单位。（只能按照1KiB或4KiB访问）<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241111212710.png"></p><p>文件系统的功能实际上是把块设备”变“为一系列操作文件的API。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241112083807.png"></p>]]></content>
    
    
    <categories>
      
      <category>learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>file system</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FastCommit论文精读</title>
    <link href="/2024/11/05/FastCommit%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB/"/>
    <url>/2024/11/05/FastCommit%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>FastCommit</strong>是一种文件系统的日志机制，主要针对传统物理日志方式（JBD2 ..）等存在的高磁盘写带宽占用、高IO占用和上下文切换开销等问题进行优化。  </p><span id="more"></span><p>核心<strong>desgin</strong>：  </p><ul><li><strong>compact journaling</strong></li><li><strong>selective flusing</strong></li><li><strong>inline journaling</strong></li></ul><p><strong>FastCommit</strong>相比于JBD2 吞吐量提升120%并成功整合到Upstream Linux Kernel中。</p><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><h2 id="Physical-Journaling-vs-Logical-Journaling"><a href="#Physical-Journaling-vs-Logical-Journaling" class="headerlink" title="Physical Journaling vs Logical Journaling"></a>Physical Journaling vs Logical Journaling</h2><p>逻辑日志只记录文件或者目录的修改操作。物理日志记录了变化的元数据（bitmaps, directory entries…）， 并在checkpoint或者crash recovery的时候写回disk。  </p><p>大部分文件系统都是用了物理日志，因为物理日志方柏霓使用，文件系统格式不敏感并且容易维护。但是物理日志一般体量较大</p><p>逻辑日志的size较小并且记录日志的速度快，但是他的崩溃恢复机制比较复杂并且很慢（因为需要对文件操作进行重放）。</p><h2 id="JBD2-Journaling"><a href="#JBD2-Journaling" class="headerlink" title="JBD2 Journaling"></a>JBD2 Journaling</h2><p>JBD2是最常用的物理日志方式，被大多数文件系统采用。它通过提交一个事务的方式来对多个块进行以此更新。在checkpoint可以异步的将其存储的元数据写入磁盘。</p><h2 id="NFS-protocol-and-semantics"><a href="#NFS-protocol-and-semantics" class="headerlink" title="NFS protocol and semantics."></a>NFS protocol and semantics.</h2><h2 id="NFS-protocol-and-semantics-1"><a href="#NFS-protocol-and-semantics-1" class="headerlink" title="NFS protocol and semantics."></a>NFS protocol and semantics.</h2><h3 id="Close-to-Open-Consistency-Mechanism"><a href="#Close-to-Open-Consistency-Mechanism" class="headerlink" title="Close-to-Open Consistency Mechanism"></a>Close-to-Open Consistency Mechanism</h3><p>NFS（Network File System）中的 ### ### Close-to-Open Consistency Mechanism</p><p>NFS（Network File System）中的 close-to-open 机制是一种确保文件一致性的策略。其主要目标是在文件关闭（close）和重新打开（open）之间保持文件数据的一致性。具体包括以下几个步骤：</p><ol><li><p><strong>文件关闭（Close）</strong>：</p><ul><li>当客户端关闭一个文件时，NFS 客户端会将所有对该文件的修改（写操作）同步到服务器，确保服务器上的文件数据是最新的。</li></ul></li><li><p><strong>文件打开（Open）</strong>：</p><ul><li>客户端重新打开文件时，NFS 客户端会检查服务器上的文件是否有更新。如果服务器上的文件自上次客户端缓存以来发生变化，客户端会丢弃缓存，并从服务器重新读取文件数据。</li></ul></li></ol><p>通过该机制，NFS 保证文件在关闭和重新打开之间的修改能够被检测和同步，从而提高了文件系统的一致性。这在多客户端同时访问和修改同一文件的分布式环境中尤为重要。</p><h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><h2 id="JBD2多次频繁的commit导致效率低下"><a href="#JBD2多次频繁的commit导致效率低下" class="headerlink" title="JBD2多次频繁的commit导致效率低下"></a>JBD2多次频繁的commit导致效率低下</h2><p>JBD2每5秒就要提交一次并且每次都会触发fsync。<br>每次JBD2提交至少存储3个块（4KB）——一个描述符块（关于提交中其他块的元数据），至少一个已更改的元数据块，以及一个表示提交结束的提交标记块。<br>每次JBD2提交至少需要两个写IOs——一个写描述符块以及已更改的元数据块到磁盘，另一个写提交标记块。</p><h2 id="NFS的一致性保证不适用于JBD2"><a href="#NFS的一致性保证不适用于JBD2" class="headerlink" title="NFS的一致性保证不适用于JBD2"></a>NFS的一致性保证不适用于JBD2</h2><p>NFS 的异步模式语义会将每个 <code>create + append + close</code> 操作转换为 <code>create + append + close + fsync</code>。因此，对于 JBD2 而言，默认的 NFS 不会频繁地将大型提交转换为 <code>fsync-on-close</code>。然而，如果使用的是同步模式的 NFS，上述操作会被转换为 <code>create + fsync</code>、<code>append + fsync</code> 和 <code>close + fsync</code>，这就导致了性能上的异常情况。</p><h2 id="与云环境的收费机制之间的矛盾"><a href="#与云环境的收费机制之间的矛盾" class="headerlink" title="与云环境的收费机制之间的矛盾"></a>与云环境的收费机制之间的矛盾</h2><p>高字节和IO开销：JBD2在进行大量元数据操作时，会产生大量的字节和IO开销，尤其是在频繁的fsync调用下。这在云环境中会导致更高的成本，因为云存储通常基于使用量收费（如IOPS和吞吐量）。<br>成本影响：由于JBD2的高开销，用户在云中使用Ext4文件系统时，可能需要购买更多的存储性能（如更高的IOPS和带宽）以满足性能需求，从而增加了整体成本。</p><h1 id="Main-Idea"><a href="#Main-Idea" class="headerlink" title="Main Idea"></a>Main Idea</h1><p>FastCommit的目标是减少日志的byte和IO的overhead，以此来减少资源消耗并提高用户的使用体验。<br>他的核心idea就是混合使用logical journaling 和 physical journaling。FastCommit不修改JBD2每5秒commit一次的设计，但是在这5s中间，FastCommit会去尝试进行logical journaling，但是如果无法进行logical journaling（通常是一些比较少见的操作比如文件系统的resize等），则退回到传统的JBD2的方式。</p><h1 id="Desgin"><a href="#Desgin" class="headerlink" title="Desgin"></a>Desgin</h1><h2 id="Hybrid-Jounraling"><a href="#Hybrid-Jounraling" class="headerlink" title="Hybrid Jounraling"></a>Hybrid Jounraling</h2><p>像JBD2这样的物理日志被设计为在块级别提供日志记录。另一方面，逻辑日志记录文件和目录操作，这些操作位于inode级别，而不是块级别。因此，FASTCOMMIT的混合日志需要在两个级别上都支持日志记录和恢复，而不会造成分层冲突。  </p><h3 id="The-FASTCOMMIT-commit"><a href="#The-FASTCOMMIT-commit" class="headerlink" title="The FASTCOMMIT commit"></a>The FASTCOMMIT commit</h3><p>首先介绍一下在俩次slow commit之间FastCommit做了什么<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241112105423.png"><br>这里作者举了例子来说明FastCommit的操作过程：</p><ol><li>首先FastCommit维护了俩个In-Memory的List：L<sub>I</sub>和L<sub>D</sub>，L<sub>I</sub>用来记录inode的更新；L<sub>D</sub>用来记录目录条目的更新。</li><li>假设有个线程T1创建了一个新的文件F1，那么像L<sub>I</sub>中插入新分配的inode；向L<sub>D</sub>中插入新的目录条目。</li><li>假设后续线程T2向文件F1中追加了数据，这里和传统的JBD2的区别就出现了：JBD2会存储完整的被修改的元数据快的副本，而FastCommit进存储被修改的数据块的中被涉及的部分的偏移量。如图中所示i1更新为i1’。</li><li>随后线程T2创建新文件F2，对应的inode和目录条目也被更新进俩个list中。</li><li>随后线程T1发起fsync操作，FastCommit遍历俩个list，将所有的更新到宝成一个FCLog并将其存储到FC area。通常一个FCLog可以容纳进一个4KiB的磁盘块中。</li></ol><h3 id="FCLog"><a href="#FCLog" class="headerlink" title="FCLog"></a>FCLog</h3><p><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241112105439.png"><br>前面提到，FastCommit在线程调用fsync后会把所有文件更新大包围一个FCLog并写入到FC area，注意这里FC area并没有新开辟任何空间，而是在JBD2的原本存放日志的位置占用了15%的space，所以没有引入额外的overhead。</p><p>每个FCLog记录了多个文件的更新操作，是由多个FCTag组成的，每个FCTag包含三个部分：</p><ul><li>type(2 Bytes)</li><li>length(2 Bytes)</li><li>value(variable length)</li></ul><p>FCLog总是以头标记开始，以尾标记结束，它们都占用12个字节。head标记标志着FASTCOMMIT提交的开始，并包含前一个慢提交的提交ID，之后应该重播这个FCLog以备恢复。tail标记标志着FCLog的结束（类似于传统JBD2提交中的提交块）。</p><p>注意大部分的文件操作都可以用8个FCTags来描述：</p><ol><li>HEAD: 标志一个FCLog的开始</li><li>ADD_RANGE: 在一个文件中添加数据</li><li>DEL_RANGE: 在一个文件中删除数据</li><li>CREAT: 创建一个文件</li><li>LINK: 符号链接或重命名文件 </li><li>UNLINK: 删除一个文件</li><li>INODE: 存储一个inode </li><li>TAIL: FCLog的结尾并包含一个checksum</li></ol><p>可以举几个例子来说明如何用FCTags来记录文件操作。</p><ol><li>文件创建&#x2F;删除：这个操作创建了一个包含俩个FCTags的FCLog。CREATE和INODE，CREATE表明这是一个文件创建操作，INODE则存储了一个新的Inode的副本。</li><li>向文件中追加内容：我们考虑向一个叫做foo的文件中添加4KiB的数据，这个操作会产生一下的FCTags：<ol><li>HEAD Tags (12Bytes)</li><li>ADD_RANGE FCTag (20 bytes)表示在文件中添加了一个逻辑块地址为1、物理块地址为1000、大小为1块的新区段。</li><li>INODE FCTag (136 bytes):文件inode的最新副本。</li><li>TAIL FCTag (12 bytes).</li></ol></li></ol><p>整个FCLog的开销是168Bytes，首先说一下inode的136Bytes的构成：<br><code>INODE FCTag</code> 的大小为 136 字节，主要是由于 inode 结构中包含了多个字段，每个字段占用一定的字节数。以下是详细的计算过程：</p><p><strong>inode 结构组成及字节分配</strong>：</p><ol><li><strong>文件类型和权限（mode）</strong>：4 字节</li><li><strong>用户ID（UID）</strong>：4 字节</li><li><strong>组ID（GID）</strong>：4 字节</li><li><strong>文件大小（size）</strong>：8 字节</li><li><strong>访问时间（atime）</strong>：8 字节</li><li><strong>修改时间（mtime）</strong>：8 字节</li><li><strong>更改时间（ctime）</strong>：8 字节</li><li><strong>链接计数（nlink）</strong>：4 字节</li><li><strong>块指针（block pointers）</strong>：<ul><li>直接指针：48 字节（假设有12个直接指针，每个指针4字节）</li><li>间接指针：32 字节（例如，单、双、三重间接指针，每个指针4字节）</li></ul></li><li><strong>扩展属性（extended attributes）</strong>：16 字节</li><li><strong>校验和（checksum）</strong>：8 字节</li></ol><h3 id="具体计算"><a href="#具体计算" class="headerlink" title="具体计算"></a>具体计算</h3><table><thead><tr><th>字段</th><th>字节数</th></tr></thead><tbody><tr><td>mode</td><td>4</td></tr><tr><td>UID</td><td>4</td></tr><tr><td>GID</td><td>4</td></tr><tr><td>size</td><td>8</td></tr><tr><td>atime</td><td>8</td></tr><tr><td>mtime</td><td>8</td></tr><tr><td>ctime</td><td>8</td></tr><tr><td>nlink</td><td>4</td></tr><tr><td>块指针（直接 + 间接）</td><td>80</td></tr><tr><td>扩展属性</td><td>16</td></tr><tr><td>校验和</td><td>8</td></tr><tr><td><strong>总计</strong></td><td><strong>136</strong></td></tr></tbody></table><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li><strong>块指针</strong>：通常，一个 inode 包含多个直接和间接块指针，用于指向文件的数据块。假设有12个直接指针，每个4字节，共48字节；再加上单、双、三重间接指针，每个4字节，共32字节，总计80字节。</li><li><strong>扩展属性</strong>：用于存储文件的附加信息，如SELinux标签等，占用16字节。</li><li><strong>校验和</strong>：用于确保 inode 数据的一致性和完整性，占用8字节。</li></ul><p>通过以上字段的累加，总大小为136字节，因此 <code>INODE FCTag</code> 需要136字节来记录 inode 的最新副本。</p><p>而同样的操作JBD2则需要24KiB来完成。这是因为：</p><ol><li>一个文件描述快(4KiB)</li><li>修改的元数据快：<ol><li>inode(4KiB)</li><li>目录entry(4KiB)</li><li>块位图(4KiB)</li><li>扩展树块(4KiB)</li></ol></li><li>提交标记块(4KiB)</li><li>在文件中删除数据：FastCommit只记录被删除文件所属的一个区段在DEL_RANGE中。当FASTCOMMIT记录了DEL_RANGE标签中的逻辑块范围后，删除操作会更新inode以反映文件当前的块分配状态。在恢复过程中，可以通过解析最新的inode状态来推断出哪些物理块已被释放或删除，而无需在日志中显式存储这些物理块地址。</li><li>重命名文件：假设文件“&#x2F;foo”要重命名为“&#x2F;bar”。让我们假设目录条目“&#x2F;foo”与磁盘上的inode i10相关联。重命名操作将生成以下FCTags：<ol><li>HEAD FCTag (12 bytes). </li><li>LINK FCTag that records the association of “bar” with i10 (16 bytes). </li><li>UNLINK FCTag that records the disassociation of the directory entry “foo” from i10 (16 bytes). </li><li>INODE FCTag that records the most recent copy of inode i10 (136 bytes). </li><li>TAIL FCTag (12 bytes).<br>因此，rename的整个FASTCOMMIT提交被捕获为192字节。在JBD2中，重命名操作需要存储7个大小为4KB的块，每个块总共28KB。</li></ol></li></ol><p>当将文件 &#x2F;foo 重命名为 &#x2F;bar 时，涉及以下操作：</p><ol><li>描述符块（4KB）：<br>记录此次重命名操作的基本信息。</li><li>修改的元数据块（4KB × 5 &#x3D; 20KB）：<ol><li>inode 块：更新 &#x2F;foo 和 &#x2F;bar 的 inode 信息。</li><li>目录条目块：更新旧目录 &#x2F;foo 中的条目，移除对 inode i10 的引用。</li><li>新目录条目块：在新目录 &#x2F;bar 中创建新的目录条目，指向 inode i10。</li><li>块位图块（Block Bitmap）：如果有块分配或释放，需要更新块位图。</li><li>扩展树块（Extent Tree Block）：如果涉及扩展属性，还需要更新扩展树。</li></ol></li><li>提交标记块（4KB）：</li></ol><h2 id="Selective-Flushing"><a href="#Selective-Flushing" class="headerlink" title="Selective Flushing"></a>Selective Flushing</h2><p>Cache flush命令强制磁盘将写入易失性Cache中的数据全部写入非易失性介质。文件系统广泛使用刷新来保证数据的一致性。但是，如果日志子系统在决定何时进行刷新时不小心，它可能会将数据刷新到磁盘，而这些数据本可以安全地在磁盘缓存中驻留更长时间。</p><p>以JBD2为例，JBD2首先用写入实际数据和文件操作设计的元数据，为了确保数据全部持久化就需要一次flush，之后还需要写一个commit block来标志这个commit结束，但这里不需要flush而是用一个FUA跳过页缓存直接写入磁盘。但注意FUA一次只能写入一个block。</p><p>我的理解是，FastCommit设计的FCLog大部分情况下都可以容纳进一个block里面，那么就可以直接用FUA写入从而避免flush的时间，对于那些无法用logical journal的情况就退回到JBD2的机制，所以叫做selective flushing。</p><h2 id="Inline-Jounarling"><a href="#Inline-Jounarling" class="headerlink" title="Inline Jounarling"></a>Inline Jounarling</h2><p>这里感觉论文写的并不是很清楚，大概意思是说FastCommit可以把journal做的很小，然后就不需要切换到JBD2的线程来进行commit，因此少了俩次上下文切换的开销，换来了一些吞吐量。</p><h1 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h1>]]></content>
    
    
    <categories>
      
      <category>Reading Group</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JBD2</tag>
      
      <tag>Journaling</tag>
      
      <tag>FastCommit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git源码解析-环境搭建</title>
    <link href="/2024/11/03/git%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/11/03/git%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Why-How"><a href="#Why-How" class="headerlink" title="Why? How?"></a>Why? How?</h1><h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><p>做这件事的起因是在和导师做的一篇论文想去argue一个场景，场景下涉及到去了解git的delta compression机制，所以这个系列的文章核心是弄清楚git的压缩相关机制，当然如果工作流有涉及那么也会一起研究下。</p><span id="more"></span><h2 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h2><p>在本地环境从源码编译git的源代码。</p><h3 id="1-获取源代码"><a href="#1-获取源代码" class="headerlink" title="1. 获取源代码"></a>1. 获取源代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/git/git.git<br><span class="hljs-built_in">cd</span> git<br></code></pre></td></tr></table></figure><h3 id="2-配置编译选项"><a href="#2-配置编译选项" class="headerlink" title="2. 配置编译选项"></a>2. 配置编译选项</h3><p>在编译之前，可以配置安装路径和其他选项。为了不覆盖系统自带的Git，建议将编译后的Git安装到 &#x2F;usr&#x2F;local 或者其他自定义目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make configure<br>./configure --prefix=/home/Helix/repos/myGit/<br></code></pre></td></tr></table></figure><p>–prefix&#x3D;&#x2F;usr&#x2F;local 指定安装路径为 &#x2F;usr&#x2F;local，这样不会覆盖系统自带的Git（通常安装在 &#x2F;usr&#x2F;bin&#x2F;git）。</p><h3 id="3-编译和安装Git"><a href="#3-编译和安装Git" class="headerlink" title="3. 编译和安装Git"></a>3. 编译和安装Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">make all<br><br><span class="hljs-comment"># 可选：运行测试确保一切正常</span><br>make <span class="hljs-built_in">test</span><br><br><span class="hljs-comment"># 安装到指定目录</span><br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure><h3 id="4-创建别名"><a href="#4-创建别名" class="headerlink" title="4. 创建别名"></a>4. 创建别名</h3><p>创建一个自定义别名即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加到zshrc文件中</span><br><span class="hljs-built_in">alias</span> mygit=<span class="hljs-string">&#x27;/home/Helix/repos/myGit/bin/git&#x27;</span><br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><p>之后使用mygit就可以执行编译后的版本，方便调试。</p><h3 id="5-编写脚本方便后续编译"><a href="#5-编写脚本方便后续编译" class="headerlink" title="5. 编写脚本方便后续编译"></a>5. 编写脚本方便后续编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 定义安装前缀</span><br>PREFIX=/home/junwu202322080121/Helix/repos/myGit<br><br><span class="hljs-comment"># 导航到 Git 源代码目录</span><br><span class="hljs-built_in">cd</span> /home/junwu202322080121/Helix/repos/git || <span class="hljs-built_in">exit</span><br><br><span class="hljs-comment"># 拉取最新更改（如果需要）</span><br><span class="hljs-comment"># git pull origin master</span><br><br><span class="hljs-comment"># 配置编译选项（如果尚未配置）</span><br><span class="hljs-keyword">if</span> [ ! -f Makefile ]; <span class="hljs-keyword">then</span><br>    make configure<br>    ./configure --prefix=<span class="hljs-variable">$&#123;PREFIX&#125;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 编译</span><br>make -j$(<span class="hljs-built_in">nproc</span>)<br><br><span class="hljs-comment"># # 运行测试（可选）</span><br><span class="hljs-comment"># make test</span><br><br><span class="hljs-comment"># 安装</span><br><span class="hljs-built_in">sudo</span> make install<br><br><span class="hljs-comment"># 打印版本以验证</span><br><span class="hljs-variable">$&#123;PREFIX&#125;</span>/bin/git --versioncd<br></code></pre></td></tr></table></figure><h3 id="6-修改代码验证"><a href="#6-修改代码验证" class="headerlink" title="6. 修改代码验证"></a>6. 修改代码验证</h3><p>这里我们在 <code>git.c</code>中的 cmd_main函数中加一句输出(git的程序入口)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">cmd_main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is mygit building.\n&quot;</span>);<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编译并在任意空目录使用mygit创建一个new repo<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109134323.png"><br>证明环境搭建成功。</p>]]></content>
    
    
    <categories>
      
      <category>learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>路书计划-20240413</title>
    <link href="/2024/04/14/%E8%B7%AF%E4%B9%A6%E8%AE%A1%E5%88%92-20240413/"/>
    <url>/2024/04/14/%E8%B7%AF%E4%B9%A6%E8%AE%A1%E5%88%92-20240413/</url>
    
    <content type="html"><![CDATA[<h1 id="首先记录这美好的一天"><a href="#首先记录这美好的一天" class="headerlink" title="首先记录这美好的一天"></a>首先记录这美好的一天</h1><p>先放一下昨天晚上的规划<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133637.png"></p><span id="more"></span><p>今天蛮早就醒了，还是很期待今天会遇到什么的，虽然心里知道大概率也不会有什么太特别的事，但是谁知道呢哈哈哈，而且另外一方面感觉像是约定好了的一天，心里很充实。<br>吃过早饭后，骑上共享小电车到了最近的一个地铁站，做了几站地铁到了今天的第一站郫筒。<br>其实路过过很多次，一直没下来过，也挺好奇为什么叫郫筒的，所以还去特意查了一下，大概是说郫县有一个郫筒池，然后郫县的人会在这个池子旁边酿酒（用竹筒、蕉叶啥的），管这种酒叫郫筒酒，后来就有了这个地方。不过不重要，来这里还是想找一些市井的范围，找一找郫县人的松弛感。所以也没有特意的往想要往哪里走，只是定了一下中午要吃饭的地方。<br>然后就开始闲逛，逛的时候特地记了一下都走过了哪些街道，因为记得昨天靓靓说可以记录下来点亮一下去过的地方。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133702.png"><br>安民街算是出发的第一条街道，走着走着发现一个小公园，有叔叔阿姨带娃晒太阳，有年轻人出来遛狗，也有老人打牌、玩健身器材。还看到一个老奶奶在晒太阳睡着了，真的特别安详的感觉。随便照了一些东西，记录下这种松弛感，确确实实是我现在很需要的，感觉很治愈，也让我一直紧绷的心情放松了很多。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133712.png"><br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133724.png"><br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133734.png"><br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133741.png"><br>之后还进了一条什么王府商业街，其实没太感兴趣的，但是这条街可以上到二楼去，不知道为什么从小就喜欢往高处爬所以就过去了，在上面转了转，没看到什么太有意思的东西，不过这里放一张照片，不知道靓靓同学看到以后知不知道我想照什么哈哈哈哈。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133751.png"><br>之后在这边随便逛了逛，其实心里也没有太多预期，只是尝试想去融入到这种轻松的氛围里去，什么也不用想，什么也不用操心，完完全全的让自己的身体放空，心灵也放空。想象了一下自己也过着简单的生活，其实也蛮幸福的。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133800.png"><br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133809.png"><br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133816.png"><br>吃过午饭后去了下望从祠，其实没有特别喜欢哈哈哈哈，但是植物很多也很凉爽，很适合休息一下，所以也待了好一会，在这里也没有照什么，大部分时间都在一个长椅上闭目养生，呼吸久违的新鲜空气，有泥土的味道，参杂着一些花香，还有一丝丝铝的味道，但是不知道是哪里来的哈哈哈<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133823.png"><br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133829.png"><br>之后就打算去了下清水河艺术公园，本科一直在沙河，所以对清水河到底是一条什么河其实也没什么概念，所以还是挺想去看下的。哦对，今天我的主要交通工具就是下面这个东西，晃晃悠悠、慢慢吞吞的很符合我今天的心境。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133844.png"><br>下了有轨电车后出现了个小插曲，走错了路，但是在路上捡到了一块钱哈哈哈哈，觉得运气还挺不错的。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133852.png"><br>在这个公园里转了转，很多人搭帐篷、放风筝、烤肉、聊天、放歌等等等等，基本都是沿着清水河的河道，想到了之前靓靓说的亲水性的问题，亲水性还蛮好的。大概转了一圈后，突然有点想给靓靓打个电话，但感觉打电话好像又有点突兀，主要是很想知道她现在眼前是什么，所以发了微信，还蛮巧的哈哈哈哈。在草坪上又坐了一会，给子扬打了个电话，他这几天生病了，于是问候了一下。<br>之后其实有点疲惫了，就没有去第四个地方，但是突然想到离之前想去的一个吃饭的地方很近，正好逛到这会有些饿了，于是就直接骑电动车过去了。去了以后发现真的是苍蝇馆子中的苍蝇馆子哈哈哈哈，点菜的方式也挺有意思，点菜的窗口堆满了食材，点一道菜厨师就放对应的食材到小盆盆里，然后标记好是哪一桌，点了一个肝腰合炒和泡椒鸡杂，味道真的是很好。吃过之后就回学校啦。<br>路上决定要去看电影，和靓靓的场次其实还蛮同步的，像是一起去看的一样。这个片子其实之前听几个朋友推荐过，也一直蛮想看的。整个看下来真的是特别喜欢，特别特别喜欢。第一个原因是我感觉这部电影像是作者和自己的对话，我猜可能有很多情节都是和自身的经历有些关系，我觉得能用这种方式，把自我抽离出来去看曾经的事情才能真的和自己和解。其次是我很喜欢最后的情绪表达，整部电影只提过一次你想活出怎样的人生，而更多的再说你想要一个什么样的世界，其实世界是客观的也是主观的，而且终究对于每个人都是主观的，每个人的认知构成了每个人眼中的世界，也在这种认知的过程中去改造自己眼中的世界，找到自己想要的人生。真的很喜欢。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133928.png"><br>好了，最后就是去喝了点酒，感觉如此美好的一天不喝点总归是说不过去的。<br><img src="https://picbed-1300534156.cos.ap-chengdu.myqcloud.com/img/20241109133935.png"><br>另外我还要写一段话来阐述一下再写这些时的心境。我很高兴认识了靓靓，或者说了解了她，能如此有默契真的是我之前完全没有想到的。路书计划就只是随便聊聊就一拍即合了，真的觉的这种感觉很奇妙，我很少和别人这么深入的去表露我自己的很多想法，也很少觉得有人能理解我的心境（可能也是和我不怎么表露有关，并不是有多深奥hhh），我真的觉得是很幸运的，也真的很希望这种感觉可以持续下去，这种默契可以一直都存在，这种彼此感到满足的感觉不会间断。<br>以上，敬这美好的一天。</p><h1 id="一些给之后的tips"><a href="#一些给之后的tips" class="headerlink" title="一些给之后的tips"></a>一些给之后的tips</h1><ol><li>没有必要带相机其实，蛮沉的哈哈哈哈。</li><li>下次开始之前可以考虑一下这个过程中要听什么。</li><li>计划的粒度还是要更细一些。</li><li>保持水分充足。</li><li>前一天保证睡眠。</li></ol><h1 id="一些地标的记录"><a href="#一些地标的记录" class="headerlink" title="一些地标的记录"></a>一些地标的记录</h1><p>清水河艺术生态公园</p><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-103.86-30.79" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-103.86-30.79',{center:[30.79,103.86],zoom:15,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.79','103.86']).addTo(mymap);marker.bindPopup("人很多，很适合过来露营！").openPopup();</script><p>郫筒</p><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-103.89-30.80" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-103.89-30.80',{center:[30.80,103.89],zoom:15,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.80','103.89']).addTo(mymap);marker.bindPopup("还成吧，随便逛逛！").openPopup();</script><p>望从祠</p><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-103.87-30.81" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-103.87-30.81',{center:[30.81,103.87],zoom:15,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.81','103.87']).addTo(mymap);marker.bindPopup("很凉快，空气很好！").openPopup();</script><p>南华大学</p><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-112.52-26.88" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-112.52-26.88',{center:[26.88,112.52],zoom:15,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['26.88','112.52']).addTo(mymap);marker.bindPopup("嘿嘿嘿").openPopup();</script>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>photo</tag>
      
      <tag>travel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/03/hello-world/"/>
    <url>/2024/04/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>aaa<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>guide</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
