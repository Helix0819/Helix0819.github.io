{"posts":[{"title":"FastCommit论文精读","text":"IntroductionFastCommit是一种文件系统的日志机制，主要针对传统物理日志方式（JBD2 ..）等存在的高磁盘写带宽占用、高IO占用和上下文切换开销等问题进行优化。 核心desgin： compact journaling selective flusing inline journaling FastCommit相比于JBD2 吞吐量提升120%并成功整合到Upstream Linux Kernel中。 BackgroundPhysical Journaling vs Logical Journaling逻辑日志只记录文件或者目录的修改操作。物理日志记录了变化的元数据（bitmaps, directory entries…）， 并在checkpoint或者crash recovery的时候写回disk。 大部分文件系统都是用了物理日志，因为物理日志方柏霓使用，文件系统格式不敏感并且容易维护。但是物理日志一般体量较大 逻辑日志的size较小并且记录日志的速度快，但是他的崩溃恢复机制比较复杂并且很慢（因为需要对文件操作进行重放）。 JBD2 JournalingJBD2是最常用的物理日志方式，被大多数文件系统采用。它通过提交一个事务的方式来对多个块进行以此更新。在checkpoint可以异步的将其存储的元数据写入磁盘。 NFS protocol and semantics.NFS protocol and semantics.Close-to-Open Consistency MechanismNFS（Network File System）中的 ### ### Close-to-Open Consistency Mechanism NFS（Network File System）中的 close-to-open 机制是一种确保文件一致性的策略。其主要目标是在文件关闭（close）和重新打开（open）之间保持文件数据的一致性。具体包括以下几个步骤： 文件关闭（Close）： 当客户端关闭一个文件时，NFS 客户端会将所有对该文件的修改（写操作）同步到服务器，确保服务器上的文件数据是最新的。 文件打开（Open）： 客户端重新打开文件时，NFS 客户端会检查服务器上的文件是否有更新。如果服务器上的文件自上次客户端缓存以来发生变化，客户端会丢弃缓存，并从服务器重新读取文件数据。 通过该机制，NFS 保证文件在关闭和重新打开之间的修改能够被检测和同步，从而提高了文件系统的一致性。这在多客户端同时访问和修改同一文件的分布式环境中尤为重要。 MotivationJBD2多次频繁的commit导致效率低下JBD2每5秒就要提交一次并且每次都会触发fsync。每次JBD2提交至少存储3个块（4KB）——一个描述符块（关于提交中其他块的元数据），至少一个已更改的元数据块，以及一个表示提交结束的提交标记块。每次JBD2提交至少需要两个写IOs——一个写描述符块以及已更改的元数据块到磁盘，另一个写提交标记块。 NFS的一致性保证不适用于JBD2NFS 的异步模式语义会将每个 create + append + close 操作转换为 create + append + close + fsync。因此，对于 JBD2 而言，默认的 NFS 不会频繁地将大型提交转换为 fsync-on-close。然而，如果使用的是同步模式的 NFS，上述操作会被转换为 create + fsync、append + fsync 和 close + fsync，这就导致了性能上的异常情况。 与云环境的收费机制之间的矛盾高字节和IO开销：JBD2在进行大量元数据操作时，会产生大量的字节和IO开销，尤其是在频繁的fsync调用下。这在云环境中会导致更高的成本，因为云存储通常基于使用量收费（如IOPS和吞吐量）。成本影响：由于JBD2的高开销，用户在云中使用Ext4文件系统时，可能需要购买更多的存储性能（如更高的IOPS和带宽）以满足性能需求，从而增加了整体成本。 Main IdeaFastCommit的目标是减少日志的byte和IO的overhead，以此来减少资源消耗并提高用户的使用体验。他的核心idea就是混合使用logical journaling 和 physical journaling。FastCommit不修改JBD2每5秒commit一次的设计，但是在这5s中间，FastCommit会去尝试进行logical journaling，但是如果无法进行logical journaling（通常是一些比较少见的操作比如文件系统的resize等），则退回到传统的JBD2的方式。 DesginHybrid Jounraling像JBD2这样的物理日志被设计为在块级别提供日志记录。另一方面，逻辑日志记录文件和目录操作，这些操作位于inode级别，而不是块级别。因此，FASTCOMMIT的混合日志需要在两个级别上都支持日志记录和恢复，而不会造成分层冲突。 The FASTCOMMIT commit首先介绍一下在俩次slow commit之间FastCommit做了什么这里作者举了例子来说明FastCommit的操作过程： 首先FastCommit维护了俩个In-Memory的List：LI和LD，LI用来记录inode的更新；LD用来记录目录条目的更新。 假设有个线程T1创建了一个新的文件F1，那么像LI中插入新分配的inode；向LD中插入新的目录条目。 假设后续线程T2向文件F1中追加了数据，这里和传统的JBD2的区别就出现了：JBD2会存储完整的被修改的元数据快的副本，而FastCommit进存储被修改的数据块的中被涉及的部分的偏移量。如图中所示i1更新为i1’。 随后线程T2创建新文件F2，对应的inode和目录条目也被更新进俩个list中。 随后线程T1发起fsync操作，FastCommit遍历俩个list，将所有的更新到宝成一个FCLog并将其存储到FC area。通常一个FCLog可以容纳进一个4KiB的磁盘块中。 FCLog前面提到，FastCommit在线程调用fsync后会把所有文件更新大包围一个FCLog并写入到FC area，注意这里FC area并没有新开辟任何空间，而是在JBD2的原本存放日志的位置占用了15%的space，所以没有引入额外的overhead。 每个FCLog记录了多个文件的更新操作，是由多个FCTag组成的，每个FCTag包含三个部分： type(2 Bytes) length(2 Bytes) value(variable length) FCLog总是以头标记开始，以尾标记结束，它们都占用12个字节。head标记标志着FASTCOMMIT提交的开始，并包含前一个慢提交的提交ID，之后应该重播这个FCLog以备恢复。tail标记标志着FCLog的结束（类似于传统JBD2提交中的提交块）。 注意大部分的文件操作都可以用8个FCTags来描述： HEAD: 标志一个FCLog的开始 ADD_RANGE: 在一个文件中添加数据 DEL_RANGE: 在一个文件中删除数据 CREAT: 创建一个文件 LINK: 符号链接或重命名文件 UNLINK: 删除一个文件 INODE: 存储一个inode TAIL: FCLog的结尾并包含一个checksum 可以举几个例子来说明如何用FCTags来记录文件操作。 文件创建/删除：这个操作创建了一个包含俩个FCTags的FCLog。CREATE和INODE，CREATE表明这是一个文件创建操作，INODE则存储了一个新的Inode的副本。 向文件中追加内容：我们考虑向一个叫做foo的文件中添加4KiB的数据，这个操作会产生一下的FCTags： HEAD Tags (12Bytes) ADD_RANGE FCTag (20 bytes)表示在文件中添加了一个逻辑块地址为1、物理块地址为1000、大小为1块的新区段。 INODE FCTag (136 bytes):文件inode的最新副本。 TAIL FCTag (12 bytes). 整个FCLog的开销是168Bytes，首先说一下inode的136Bytes的构成：INODE FCTag 的大小为 136 字节，主要是由于 inode 结构中包含了多个字段，每个字段占用一定的字节数。以下是详细的计算过程： inode 结构组成及字节分配： 文件类型和权限（mode）：4 字节 用户ID（UID）：4 字节 组ID（GID）：4 字节 文件大小（size）：8 字节 访问时间（atime）：8 字节 修改时间（mtime）：8 字节 更改时间（ctime）：8 字节 链接计数（nlink）：4 字节 块指针（block pointers）： 直接指针：48 字节（假设有12个直接指针，每个指针4字节） 间接指针：32 字节（例如，单、双、三重间接指针，每个指针4字节） 扩展属性（extended attributes）：16 字节 校验和（checksum）：8 字节 具体计算 字段 字节数 mode 4 UID 4 GID 4 size 8 atime 8 mtime 8 ctime 8 nlink 4 块指针（直接 + 间接） 80 扩展属性 16 校验和 8 总计 136 解释 块指针：通常，一个 inode 包含多个直接和间接块指针，用于指向文件的数据块。假设有12个直接指针，每个4字节，共48字节；再加上单、双、三重间接指针，每个4字节，共32字节，总计80字节。 扩展属性：用于存储文件的附加信息，如SELinux标签等，占用16字节。 校验和：用于确保 inode 数据的一致性和完整性，占用8字节。 通过以上字段的累加，总大小为136字节，因此 INODE FCTag 需要136字节来记录 inode 的最新副本。 而同样的操作JBD2则需要24KiB来完成。这是因为： 一个文件描述快(4KiB) 修改的元数据快： inode(4KiB) 目录entry(4KiB) 块位图(4KiB) 扩展树块(4KiB) 提交标记块(4KiB) 在文件中删除数据：FastCommit只记录被删除文件所属的一个区段在DEL_RANGE中。当FASTCOMMIT记录了DEL_RANGE标签中的逻辑块范围后，删除操作会更新inode以反映文件当前的块分配状态。在恢复过程中，可以通过解析最新的inode状态来推断出哪些物理块已被释放或删除，而无需在日志中显式存储这些物理块地址。 重命名文件：假设文件“/foo”要重命名为“/bar”。让我们假设目录条目“/foo”与磁盘上的inode i10相关联。重命名操作将生成以下FCTags： HEAD FCTag (12 bytes). LINK FCTag that records the association of “bar” with i10 (16 bytes). UNLINK FCTag that records the disassociation of the directory entry “foo” from i10 (16 bytes). INODE FCTag that records the most recent copy of inode i10 (136 bytes). TAIL FCTag (12 bytes).因此，rename的整个FASTCOMMIT提交被捕获为192字节。在JBD2中，重命名操作需要存储7个大小为4KB的块，每个块总共28KB。 当将文件 /foo 重命名为 /bar 时，涉及以下操作： 描述符块（4KB）：记录此次重命名操作的基本信息。 修改的元数据块（4KB × 5 = 20KB）： inode 块：更新 /foo 和 /bar 的 inode 信息。 目录条目块：更新旧目录 /foo 中的条目，移除对 inode i10 的引用。 新目录条目块：在新目录 /bar 中创建新的目录条目，指向 inode i10。 块位图块（Block Bitmap）：如果有块分配或释放，需要更新块位图。 扩展树块（Extent Tree Block）：如果涉及扩展属性，还需要更新扩展树。 提交标记块（4KB）： Selective FlushingCache flush命令强制磁盘将写入易失性Cache中的数据全部写入非易失性介质。文件系统广泛使用刷新来保证数据的一致性。但是，如果日志子系统在决定何时进行刷新时不小心，它可能会将数据刷新到磁盘，而这些数据本可以安全地在磁盘缓存中驻留更长时间。","link":"/2024/11/05/FastCommit%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB/"},{"title":"Git源码解析-环境搭建","text":"Why? How?Why?做这件事的起因是在和导师做的一篇论文想去argue一个场景，场景下涉及到去了解git的delta compression机制，所以这个系列的文章核心是弄清楚git的压缩相关机制，当然如果工作流有涉及那么也会一起研究下。 How?在本地环境从源码编译git的源代码。 1. 获取源代码12git clone https://github.com/git/git.gitcd git 2. 配置编译选项在编译之前，可以配置安装路径和其他选项。为了不覆盖系统自带的Git，建议将编译后的Git安装到 /usr/local 或者其他自定义目录。 12make configure./configure --prefix=/home/Helix/repos/myGit/ –prefix=/usr/local 指定安装路径为 /usr/local，这样不会覆盖系统自带的Git（通常安装在 /usr/bin/git）。 3. 编译和安装Git1234567make all# 可选：运行测试确保一切正常make test# 安装到指定目录sudo make install 4. 创建别名创建一个自定义别名即可。 123# 添加到zshrc文件中alias mygit='/home/Helix/repos/myGit/bin/git'source ~/.zshrc 之后使用mygit就可以执行编译后的版本，方便调试。 5. 编写脚本方便后续编译12345678910111213141516171819202122232425262728#!/bin/bash# 定义安装前缀PREFIX=/home/junwu202322080121/Helix/repos/myGit# 导航到 Git 源代码目录cd /home/junwu202322080121/Helix/repos/git || exit# 拉取最新更改（如果需要）# git pull origin master# 配置编译选项（如果尚未配置）if [ ! -f Makefile ]; then make configure ./configure --prefix=${PREFIX}fi# 编译make -j$(nproc)# # 运行测试（可选）# make test# 安装sudo make install# 打印版本以验证${PREFIX}/bin/git --versioncd 6. 修改代码验证这里我们在 git.c中的 cmd_main函数中加一句输出(git的程序入口) 123456int cmd_main(int argc, const char **argv){ // ... printf(&quot;This is mygit building.\\n&quot;); // ...} 编译并在任意空目录使用mygit创建一个new repo证明环境搭建成功。","link":"/2024/11/03/git%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1hexo new &quot;My New Post&quot; More info: Writing Run server1hexo server 12#include&lt;iostream&gt;aaa More info: Server Generate static files1hexo generate More info: Generating Deploy to remote sites1hexo deploy More info: Deployment","link":"/2024/04/03/hello-world/"},{"title":"路书计划-20240413","text":"首先记录这美好的一天先放一下昨天晚上的规划 今天蛮早就醒了，还是很期待今天会遇到什么的，虽然心里知道大概率也不会有什么太特别的事，但是谁知道呢哈哈哈，而且另外一方面感觉像是约定好了的一天，心里很充实。吃过早饭后，骑上共享小电车到了最近的一个地铁站，做了几站地铁到了今天的第一站郫筒。其实路过过很多次，一直没下来过，也挺好奇为什么叫郫筒的，所以还去特意查了一下，大概是说郫县有一个郫筒池，然后郫县的人会在这个池子旁边酿酒（用竹筒、蕉叶啥的），管这种酒叫郫筒酒，后来就有了这个地方。不过不重要，来这里还是想找一些市井的范围，找一找郫县人的松弛感。所以也没有特意的往想要往哪里走，只是定了一下中午要吃饭的地方。然后就开始闲逛，逛的时候特地记了一下都走过了哪些街道，因为记得昨天靓靓说可以记录下来点亮一下去过的地方。安民街算是出发的第一条街道，走着走着发现一个小公园，有叔叔阿姨带娃晒太阳，有年轻人出来遛狗，也有老人打牌、玩健身器材。还看到一个老奶奶在晒太阳睡着了，真的特别安详的感觉。随便照了一些东西，记录下这种松弛感，确确实实是我现在很需要的，感觉很治愈，也让我一直紧绷的心情放松了很多。之后还进了一条什么王府商业街，其实没太感兴趣的，但是这条街可以上到二楼去，不知道为什么从小就喜欢往高处爬所以就过去了，在上面转了转，没看到什么太有意思的东西，不过这里放一张照片，不知道靓靓同学看到以后知不知道我想照什么哈哈哈哈。之后在这边随便逛了逛，其实心里也没有太多预期，只是尝试想去融入到这种轻松的氛围里去，什么也不用想，什么也不用操心，完完全全的让自己的身体放空，心灵也放空。想象了一下自己也过着简单的生活，其实也蛮幸福的。吃过午饭后去了下望从祠，其实没有特别喜欢哈哈哈哈，但是植物很多也很凉爽，很适合休息一下，所以也待了好一会，在这里也没有照什么，大部分时间都在一个长椅上闭目养生，呼吸久违的新鲜空气，有泥土的味道，参杂着一些花香，还有一丝丝铝的味道，但是不知道是哪里来的哈哈哈之后就打算去了下清水河艺术公园，本科一直在沙河，所以对清水河到底是一条什么河其实也没什么概念，所以还是挺想去看下的。哦对，今天我的主要交通工具就是下面这个东西，晃晃悠悠、慢慢吞吞的很符合我今天的心境。下了有轨电车后出现了个小插曲，走错了路，但是在路上捡到了一块钱哈哈哈哈，觉得运气还挺不错的。在这个公园里转了转，很多人搭帐篷、放风筝、烤肉、聊天、放歌等等等等，基本都是沿着清水河的河道，想到了之前靓靓说的亲水性的问题，亲水性还蛮好的。大概转了一圈后，突然有点想给靓靓打个电话，但感觉打电话好像又有点突兀，主要是很想知道她现在眼前是什么，所以发了微信，还蛮巧的哈哈哈哈。在草坪上又坐了一会，给子扬打了个电话，他这几天生病了，于是问候了一下。之后其实有点疲惫了，就没有去第四个地方，但是突然想到离之前想去的一个吃饭的地方很近，正好逛到这会有些饿了，于是就直接骑电动车过去了。去了以后发现真的是苍蝇馆子中的苍蝇馆子哈哈哈哈，点菜的方式也挺有意思，点菜的窗口堆满了食材，点一道菜厨师就放对应的食材到小盆盆里，然后标记好是哪一桌，点了一个肝腰合炒和泡椒鸡杂，味道真的是很好。吃过之后就回学校啦。路上决定要去看电影，和靓靓的场次其实还蛮同步的，像是一起去看的一样。这个片子其实之前听几个朋友推荐过，也一直蛮想看的。整个看下来真的是特别喜欢，特别特别喜欢。第一个原因是我感觉这部电影像是作者和自己的对话，我猜可能有很多情节都是和自身的经历有些关系，我觉得能用这种方式，把自我抽离出来去看曾经的事情才能真的和自己和解。其次是我很喜欢最后的情绪表达，整部电影只提过一次你想活出怎样的人生，而更多的再说你想要一个什么样的世界，其实世界是客观的也是主观的，而且终究对于每个人都是主观的，每个人的认知构成了每个人眼中的世界，也在这种认知的过程中去改造自己眼中的世界，找到自己想要的人生。真的很喜欢。好了，最后就是去喝了点酒，感觉如此美好的一天不喝点总归是说不过去的。另外我还要写一段话来阐述一下再写这些时的心境。我很高兴认识了靓靓，或者说了解了她，能如此有默契真的是我之前完全没有想到的。路书计划就只是随便聊聊就一拍即合了，真的觉的这种感觉很奇妙，我很少和别人这么深入的去表露我自己的很多想法，也很少觉得有人能理解我的心境（可能也是和我不怎么表露有关，并不是有多深奥hhh），我真的觉得是很幸运的，也真的很希望这种感觉可以持续下去，这种默契可以一直都存在，这种彼此感到满足的感觉不会间断。以上，敬这美好的一天。 一些给之后的tips 没有必要带相机其实，蛮沉的哈哈哈哈。 下次开始之前可以考虑一下这个过程中要听什么。 计划的粒度还是要更细一些。 保持水分充足。 前一天保证睡眠。 一些地标的记录清水河艺术生态公园 var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={\"高德地图\":normal,\"智图地图\":normalm1,\"谷歌地图\":normalMap,\"高德卫星地图\":imgm,\"谷歌卫星地图\":satelliteMap,\"高德卫星标注\":image,\"谷歌卫星标注\":routeMap};var mymap=L.map('map-103.86-30.79',{center:[30.79,103.86],zoom:15,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.79','103.86']).addTo(mymap);marker.bindPopup(\"人很多，很适合过来露营！\").openPopup(); 郫筒 var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={\"高德地图\":normal,\"智图地图\":normalm1,\"谷歌地图\":normalMap,\"高德卫星地图\":imgm,\"谷歌卫星地图\":satelliteMap,\"高德卫星标注\":image,\"谷歌卫星标注\":routeMap};var mymap=L.map('map-103.89-30.80',{center:[30.80,103.89],zoom:15,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.80','103.89']).addTo(mymap);marker.bindPopup(\"还成吧，随便逛逛！\").openPopup(); 望从祠 var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={\"高德地图\":normal,\"智图地图\":normalm1,\"谷歌地图\":normalMap,\"高德卫星地图\":imgm,\"谷歌卫星地图\":satelliteMap,\"高德卫星标注\":image,\"谷歌卫星标注\":routeMap};var mymap=L.map('map-103.87-30.81',{center:[30.81,103.87],zoom:15,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.81','103.87']).addTo(mymap);marker.bindPopup(\"很凉快，空气很好！\").openPopup(); 南华大学 var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={\"高德地图\":normal,\"智图地图\":normalm1,\"谷歌地图\":normalMap,\"高德卫星地图\":imgm,\"谷歌卫星地图\":satelliteMap,\"高德卫星标注\":image,\"谷歌卫星标注\":routeMap};var mymap=L.map('map-112.52-26.88',{center:[26.88,112.52],zoom:15,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['26.88','112.52']).addTo(mymap);marker.bindPopup(\"嘿嘿嘿\").openPopup();","link":"/2024/04/14/%E8%B7%AF%E4%B9%A6%E8%AE%A1%E5%88%92-20240413/"}],"tags":[{"name":"JBD2","slug":"JBD2","link":"/tags/JBD2/"},{"name":"Journaling","slug":"Journaling","link":"/tags/Journaling/"},{"name":"FastCommit","slug":"FastCommit","link":"/tags/FastCommit/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"guide","slug":"guide","link":"/tags/guide/"},{"name":"photo","slug":"photo","link":"/tags/photo/"},{"name":"travel","slug":"travel","link":"/tags/travel/"}],"categories":[{"name":"Reading Group","slug":"Reading-Group","link":"/categories/Reading-Group/"},{"name":"learning","slug":"learning","link":"/categories/learning/"},{"name":"life","slug":"life","link":"/categories/life/"}],"pages":[{"title":"about","text":"I’m now a postgraduate stuent in UESTC, NSTL lab. My research interest in data reduction(dedeuplication, delta compression…).I will share my learning and some life experience on my blog.Emai: 834991203@qq.comFeel free to contact me.:)","link":"/about/index.html"},{"title":"Search","text":"","link":"/search/index.html"}]}